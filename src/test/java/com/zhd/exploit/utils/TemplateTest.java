package com.zhd.exploit.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.zhd.exploit.utils.jdbc.JDBCUtil;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateExceptionHandler;

public class TemplateTest {
	public static final String outputFile = "D:\\temple\\";
	public static final String author = "zhanghaodong";
	public static final String packageNameRoot = "com.zhd.exploit";

	public static void main(String[] args) throws Exception {
		String tableName = "cpuserinfo";
		String className = "CpUserInfo";
		genService(tableName, className);

		// System.out.println(TemplateTest.class.getResource("/").getPath());
	}

	private static void genService(String tableName, String className) throws Exception {
		// 获取首字母小写类变量
		String lowClassName = className.substring(0, 1).toLowerCase() + className.substring(1);
		Map<String, Object> paramMap = getParamMap(className, lowClassName, tableName);

		Template serviceTemp = getTemplate("Service.ftl");
		Template serviceImplTemp = getTemplate("ServiceImpl.ftl");
		Template controllerTemp = getTemplate("Controller.ftl");
		Template queryHtmlTemp = getTemplate("QueryHtml.ftl");
		Template addHtmlTemp = getTemplate("AddHtml.ftl");
		Template updateHtmlTemp = getTemplate("UpdateHtml.ftl");

		save(serviceTemp, paramMap, className + "Service.java");
		save(serviceImplTemp, paramMap, className + "ServiceImpl.java");
		save(controllerTemp, paramMap, className + "Controller.java");
		save(queryHtmlTemp, paramMap, lowClassName + "-list.jsp");
		save(addHtmlTemp, paramMap, lowClassName + "-add.jsp");
		save(updateHtmlTemp, paramMap, lowClassName + "-update.jsp");

		System.out.println("gen code success!");
	}

	private static boolean isEmpty(Object object) {
		if (object == null) {
			return true;
		}
		if (object.toString().trim().equals("")) {
			return true;
		}
		return false;

	}

	private static Map<String, Object> getParamMap(String className, String lowClassName, String tableName) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("packageNameRoot", packageNameRoot);
		paramMap.put("author", author);
		paramMap.put("ClassName", className);
		paramMap.put("className", lowClassName);
		String classNames = null;
		if (lowClassName.endsWith("s")) {
			classNames = lowClassName + "es";
		} else {
			classNames = lowClassName + "s";
		}
		paramMap.put("classNames", classNames);
		// COLUMN_COMMENT是注释
		// 获取主键信息
		List<Map<String, Object>> priFieldMapList = queryTable(tableName);
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		List<String> notes = new ArrayList<>();
		List<String> columns = new ArrayList<>();
		List<Column> columnList = new ArrayList<Column>();
		for (Map<String, Object> map : priFieldMapList) {
			Object object = map.get("COLUMN_KEY");
			if ("PRI".equals(object)) {
				list.add(map);
			}
			Object COLUMN_COMMENT = map.get("COLUMN_COMMENT");
			Object COLUMN_NAME = map.get("COLUMN_NAME");
			Object CHARACTER_MAXIMUM_LENGTH = map.get("CHARACTER_MAXIMUM_LENGTH");
			String note = isEmpty(COLUMN_COMMENT) ? COLUMN_NAME.toString() : COLUMN_COMMENT.toString();
			notes.add(note);
			String columnName=COLUMN_NAME.toString();
			columns.add(columnName);
			if(!columnName.equals("updatetime") && !columnName.equals("createtime")){
				Column _column = new Column();
				_column.setColumn_name(columnName);
				_column.setColumn_comment(note);
				if (isEmpty(CHARACTER_MAXIMUM_LENGTH)) {
					_column.setLength(20);
				} else {
					_column.setLength(Integer.valueOf(CHARACTER_MAXIMUM_LENGTH.toString()));
				}
				columnList.add(_column);
			}
		}

		if (list.size() > 1) {// 表示有多主键
			paramMap.put("Primarykey", className + "Key");
			paramMap.put("primarykey", lowClassName + "Key");
			paramMap.put("ModelAttribute", "@ModelAttribute");
		} else if (list.size() == 1) {
			Map<String, Object> priFieldMap = list.get(0);
			Object priField = priFieldMap.get("COLUMN_NAME");
			String fieldType = priFieldMap.get("DATA_TYPE").toString();
			String _Primarykey = "String";
			if (fieldType.startsWith("int")) {
				_Primarykey = "Integer";
			}
			paramMap.put("Primarykey", _Primarykey);
			paramMap.put("primarykey", priField);
			paramMap.put("ModelAttribute", "");
		} else {
			paramMap.put("ModelAttribute", "");
			paramMap.put("Primarykey", "");
			paramMap.put("primarykey", "");
		}

		paramMap.put("notes", notes);
		paramMap.put("columns", columns);
		paramMap.put("columnList", columnList);
		return paramMap;
	}

	private static void save(Template template, Map<String, Object> root, String fileName) {
		try {
			File dir = new File(outputFile);
			if (!dir.exists()) {
				dir.mkdirs();
			}
			OutputStream fos = new FileOutputStream(new File(dir, fileName)); // java文件的生成目录
			Writer out = new OutputStreamWriter(fos);
			template.process(root, out);
			fos.flush();
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static List<Map<String, Object>> queryTable(String tableName) {
		JDBCUtil jdbcUtil = new JDBCUtil();
		String sql = "select * from information_schema.columns where table_schema = 'zhd' and table_name = ? ";
		List<Map<String, Object>> list = jdbcUtil.excuteQuery(sql, tableName);
		return list;
	}

	private static Template getTemplate(String tempname) {
		try {
			String path = TemplateTest.class.getResource("").getPath() + "template/";
			Configuration cfg = new Configuration(Configuration.VERSION_2_3_22);
			cfg.setDirectoryForTemplateLoading(new File(path));
			cfg.setDefaultEncoding("UTF-8");
			cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
			Template temp = cfg.getTemplate(tempname);
			return temp;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}

// List<Attribute> attr_list = new ArrayList<Attribute>();
// attr_list.add(new Attribute("id", "Long"));
// attr_list.add(new Attribute("name", "String"));
// attr_list.add(new Attribute("age", "Integer"));
// attr_list.add(new Attribute("hobby", "List<String>"));
//
// root.put("attrs", attr_list);

// Writer out = new OutputStreamWriter(System.out);
// Writer out = new OutputStreamWriter(System.out);
