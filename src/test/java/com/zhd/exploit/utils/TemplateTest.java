package com.zhd.exploit.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateExceptionHandler;

public class TemplateTest {
	public static final String outputFile = "D:\\temple\\";
	public static final String author = "zhanghaodong";
	public static final String packageNameRoot = "com.zhd.exploit";

	public static void main(String[] args) throws Exception {
		String tableName = "payqrcode";
		String className = "Payqrcode";
		genService(tableName, className);

		// System.out.println(TemplateTest.class.getResource("/").getPath());
	}

	private static void genService(String tableName, String className) throws Exception {
		// 获取首字母小写类变量
		String lowClassName = className.substring(0, 1).toLowerCase() + className.substring(1);
		// 获取主键信息
		Map<String, Object> priFieldMap = queryPri(tableName);
		Template serviceTemp = getTemplate("Service.ftl");
		Template serviceImplTemp = getTemplate("ServiceImpl.ftl");
		Template controllerTemp = getTemplate("Controller.ftl");
		Map<String, Object> paramMap = getParamMap(className, lowClassName, priFieldMap);
		save(serviceTemp, paramMap, className + "Service.java");
		save(serviceImplTemp, paramMap, className + "ServiceImpl.java");
		save(controllerTemp, paramMap, className + "Controller.java");

		System.out.println("gen code success!");
	}

	private static Map<String, Object> getParamMap(String className, String lowClassName, Map<String, Object> priFieldMap) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("packageNameRoot", packageNameRoot);
		paramMap.put("author", author);
		paramMap.put("ClassName", className);
		paramMap.put("className", lowClassName);
		String classNames = null;
		if (lowClassName.endsWith("s")) {
			classNames = lowClassName + "es";
		} else {
			classNames = lowClassName + "s";
		}
		paramMap.put("classNames", classNames);
		if (priFieldMap == null) {// 表示有多主键
			paramMap.put("Primarykey", className + "Key");
			paramMap.put("primarykey", lowClassName + "Key");
		} else {
			Object priField = priFieldMap.get("Field");
			String fieldType = priFieldMap.get("Type").toString();
			String _Primarykey = "String";
			if (fieldType.startsWith("int")) {
				_Primarykey = "Integer";
			}
			paramMap.put("Primarykey", _Primarykey);
			paramMap.put("primarykey", priField);
		}
		return paramMap;
	}

	private static void save(Template template, Map<String, Object> root, String fileName) {
		try {
			File dir = new File(outputFile);
			if (!dir.exists()) {
				dir.mkdirs();
			}
			OutputStream fos = new FileOutputStream(new File(dir, fileName)); // java文件的生成目录
			Writer out = new OutputStreamWriter(fos);
			template.process(root, out);
			fos.flush();
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static Map<String, Object> queryPri(String tableName) {
		Map<String, Object> resultMap = null;
		JDBCUtil jdbcUtil = new JDBCUtil();
		List<Map<String, Object>> list = jdbcUtil.excuteQuery("show columns from " + tableName);
		for (Map<String, Object> map : list) {
			Object object = map.get("Key");
			if ("PRI".equals(object)) {
				if (resultMap == null) {
					resultMap = map;
				} else {
					return null;
				}
			}
		}
		return resultMap;
	}

	private static Template getTemplate(String tempname) {
		try {
			String path = TemplateTest.class.getResource("").getPath() + "template/";
			Configuration cfg = new Configuration(Configuration.VERSION_2_3_22);
			cfg.setDirectoryForTemplateLoading(new File(path));
			cfg.setDefaultEncoding("UTF-8");
			cfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
			Template temp = cfg.getTemplate(tempname);
			return temp;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}

// List<Attribute> attr_list = new ArrayList<Attribute>();
// attr_list.add(new Attribute("id", "Long"));
// attr_list.add(new Attribute("name", "String"));
// attr_list.add(new Attribute("age", "Integer"));
// attr_list.add(new Attribute("hobby", "List<String>"));
//
// root.put("attrs", attr_list);

// Writer out = new OutputStreamWriter(System.out);
// Writer out = new OutputStreamWriter(System.out);
