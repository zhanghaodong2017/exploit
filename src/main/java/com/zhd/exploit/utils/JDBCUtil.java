package com.zhd.exploit.utils;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 对jdbc的完整封装
 *
 */
public class JDBCUtil {

	static Logger log = LoggerFactory.getLogger(JDBCUtil.class);

	/**
	 * insert update delete SQL语句的执行的统一方法
	 * 
	 * @param sql SQL语句
	 * @param params 参数数组，若没有参数则为null
	 * @return 受影响的行数
	 */
	public int executeUpdate(String sql, Object... params) {
		// 受影响的行数
		int affectedLine = 0;
		// 创建ResultSetMetaData对象
		Connection conn = null;
		PreparedStatement pst = null;
		try {
			// 获得连接
			conn = DBPoolConnection.getInstance().getConnection();
			// 调用SQL
			pst = conn.prepareStatement(sql);

			// 参数赋值
			if (params != null) {
				for (int i = 0; i < params.length; i++) {
					pst.setObject(i + 1, params[i]);
				}
			}
			/*
			 * 在此 PreparedStatement 对象中执行 SQL 语句， 该语句必须是一个 SQL 数据操作语言（Data
			 * Manipulation Language，DML）语句，比如 INSERT、UPDATE 或 DELETE
			 * 语句；或者是无返回内容的 SQL 语句，比如 DDL 语句。
			 */
			// 执行
			affectedLine = pst.executeUpdate();

		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			// 释放资源
			closeAll(conn, pst, null);
		}
		return affectedLine;
	}

	/**
	 * 获取结果集，并将结果放在List中
	 * 
	 * @param sql SQL语句 params 参数，没有则为null
	 * @return List 结果集
	 */
	public List<Map<String, Object>> excuteQuery(String sql, Object... params) {
		// 创建ResultSetMetaData对象
		ResultSetMetaData rsmd = null;
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rst = null;
		// 创建List
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		try {
			conn = DBPoolConnection.getInstance().getConnection();
			// 调用SQL
			pst = conn.prepareStatement(sql);
			// 参数赋值
			if (params != null) {
				for (int i = 0; i < params.length; i++) {
					pst.setObject(i + 1, params[i]);
				}
			}
			// 执行
			rst = pst.executeQuery();
			rsmd = rst.getMetaData();
			// 获得结果集列数
			int columnCount = rsmd.getColumnCount();
			// 将ResultSet的结果保存到List中
			while (rst.next()) {
				Map<String, Object> map = new HashMap<String, Object>();
				for (int i = 1; i <= columnCount; i++) {
					map.put(rsmd.getColumnLabel(i), rst.getObject(i));
				}
				list.add(map);// 每一个map代表一条记录，把所有记录存在list中
			}

		} catch (SQLException e1) {
			System.out.println(e1.getMessage());
		} finally {
			// 关闭所有资源
			closeAll(conn, pst, rst);
		}
		return list;
	}

	/**
	 * 关闭所有资源
	 */
	private void closeAll(Connection conn, PreparedStatement pst, ResultSet rst) {
		// 关闭结果集对象
		if (rst != null) {
			try {
				rst.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}

		// 关闭PreparedStatement对象
		if (pst != null) {
			try {
				pst.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}

		// 关闭Connection 对象
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
	}

	/**
	 * 通过反射机制查询单条记录
	 * 
	 * @param sql
	 * @param params
	 * @param cls
	 * @return
	 * @throws Exception
	 */
	public <T> T findSimpleRefResult(String sql, Class<T> cls ,Object... params)  {
		T resultObject = null;
		int index = 1;
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rst = null;
		try {
			conn = DBPoolConnection.getInstance().getConnection();
			pst = conn.prepareStatement(sql);
			if (params != null) {
				for (int i = 0; i < params.length; i++) {
					pst.setObject(index++, params[i]);
				}
			}
			rst = pst.executeQuery();
			ResultSetMetaData metaData = rst.getMetaData();
			int cols_len = metaData.getColumnCount();
			while (rst.next()) {
				// 通过反射机制创建一个实例
				resultObject = cls.newInstance();
				for (int i = 0; i < cols_len; i++) {
					String cols_name = metaData.getColumnName(i + 1);
					Object cols_value = rst.getObject(cols_name);
					if (cols_value == null) {
						cols_value = "";
					}
					try {
						Field field = cls.getDeclaredField(cols_name.toLowerCase());
						field.setAccessible(true); // 打开javabean的访问权限
						field.set(resultObject, cols_value);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(conn, pst, rst);
		}
		return resultObject;

	}

	/**
	 * 通过反射机制查询多条记录
	 * 
	 * @param sql
	 * @param params
	 * @param cls
	 * @return
	 * @throws Exception
	 */
	public <T> List<T> findMoreRefResult(String sql, Class<T> cls ,Object... params) {
		List<T> list = new ArrayList<T>();
		int index = 1;
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			connection = DBPoolConnection.getInstance().getConnection();
			pstmt = connection.prepareStatement(sql);
			if (params != null ) {
				for (int i = 0; i < params.length; i++) {
					pstmt.setObject(index++, params[i]);
				}
			}
			resultSet = pstmt.executeQuery();
			ResultSetMetaData metaData = resultSet.getMetaData();
			int cols_len = metaData.getColumnCount();
			while (resultSet.next()) {
				// 通过反射机制创建一个实例
				T resultObject = cls.newInstance();
				for (int i = 0; i < cols_len; i++) {
					String cols_name = metaData.getColumnName(i + 1);
					Object cols_value = resultSet.getObject(cols_name);
					if (cols_value == null) {
						cols_value = "";
					}
					try {
						Field field = cls.getDeclaredField(cols_name.toLowerCase());
						field.setAccessible(true); // 打开javabean的访问权限
						field.set(resultObject, cols_value);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
				list.add(resultObject);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(connection, pstmt, resultSet);
		}
		return list;
	}
	/**
	 * 通过反射机制查询多条记录
	 * 
	 * @param sql
	 * @param params
	 * @param cls
	 * @return
	 * @throws Exception
	 */
	public List<String> findMoreRefResult(String sql,Object... params) {
		List<String> list = new ArrayList<String>();
		int index = 1;
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet resultSet = null;
		try {
			connection = DBPoolConnection.getInstance().getConnection();
			pstmt = connection.prepareStatement(sql);
			if (params != null ) {
				for (int i = 0; i < params.length; i++) {
					pstmt.setObject(index++, params[i]);
				}
			}
			resultSet = pstmt.executeQuery();
			while (resultSet.next()) {
				// 通过反射机制创建一个实例
				String cols_value = resultSet.getString(1);
				list.add(cols_value);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			closeAll(connection, pstmt, resultSet);
		}
		return list;
	}

	/**
	 * SQL 查询将查询结果：一行一列
	 * 
	 * @param sql SQL语句
	 * @param params 参数数组，若没有参数则为null
	 * @return 结果集
	 */
	public Object executeQuerySingle(String sql, Object... params) {
		Connection conn = null;
		PreparedStatement pst = null;
		ResultSet rst = null;
		Object object = null;
		try {
			// 获得连接
			conn = DBPoolConnection.getInstance().getConnection();
			// 调用SQL
			pst = conn.prepareStatement(sql);
			// 参数赋值
			if (params != null) {
				for (int i = 0; i < params.length; i++) {
					pst.setObject(i + 1, params[i]);
				}
			}
			// 执行
			rst = pst.executeQuery();
			if (rst.next()) {
				object = rst.getObject(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			closeAll(conn, pst, rst);
		}

		return object;
	}

}