package com.zhd.exploit.utils.common;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * 
 * @author zhanghaodong
 * @version v1.0
 * @date 2018年10月17日 上午11:54:29
 * @work
 */
public class CollectionUtils {
	/**
	 * 将源List按指定大小，拆分为多个List返回
	 * 
	 * @param <T>
	 * @param sourceList 要拆分的集合
	 * @param size 指定的大小
	 * @return
	 */
	public static <T> List<List<T>> getSplitList(List<T> sourceList, int size) {
		List<List<T>> returnList = new ArrayList<List<T>>();
		int listSize = sourceList.size();
		if (size <= 0) {
			returnList.add(sourceList);
			return returnList;
		}
		int pageNum = listSize % size == 0 ? listSize / size : (listSize / size + 1);
		int start = 0;
		int end = 0;
		for (int i = 1; i <= pageNum; i++) {
			start = (i - 1) * size;
			end = i * size > listSize ? listSize : i * size;
			returnList.add(sourceList.subList(start, end));
		}
		return returnList;
	}

	/**
	 * List 软分页
	 * 
	 * @param sourceList
	 * @param pageNo
	 * @param pageSize
	 * @return
	 */
	public static <T> List<T> paginateList(List<T> sourceList, int pageNo, int pageSize) {

		if (isEmpty(sourceList)) {
			return null;
		}

		// 总条数
		int totalSize = sourceList.size();

		if (pageSize < 1) {
			pageSize = 100;
		}

		if (pageSize > totalSize) {
			pageSize = totalSize;
		}

		// 总页数
		int totalPage = totalSize % pageSize + 1;

		if (pageNo < 1) {
			pageNo = 1;
		}

		if (pageNo > totalPage) {
			pageNo = totalPage;
		}

		// 开始下标
		int fromIndex = (pageNo - 1) * pageSize;

		// 结束下标
		int toIndex = pageNo * pageSize <= totalSize ? pageNo * pageSize : totalSize;

		return new ArrayList<>(sourceList.subList(fromIndex, toIndex));
	}

	public static void main(String[] args) {
		
		List<String> lst = Arrays.asList("1", "2", "3", "4", "5");
		
		System.out.println(paginateList(lst, 5, 13));
		
	}
	
	/**
	 * 判断非空性
	 */
	public static <T> boolean isEmpty(Collection<T> coll) {
		return (coll == null || coll.isEmpty());
	}
}
