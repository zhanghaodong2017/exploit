package com.zhd.exploit.utils.security;

import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;

public final class RSAUtil {
	public static final String ALGORITHM_RSA = "RSA";
	public static final String PUBLIC_KEY = "PublicKey";
	public static final String PRIVATE_KEY = "PrivateKey";
	public static final int BYTE_IN_BITS = 8;
	public static final int PT_MAXLEN_OFFSET = 11;

	public static Map<String, Object> generateKey(int keyLength) throws NoSuchAlgorithmException {
		KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
		keyPairGen.initialize(keyLength);
		KeyPair keyPair = keyPairGen.generateKeyPair();
		RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
		RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
		Map<String, Object> keyMap = new HashMap<String, Object>(2);
		keyMap.put("PublicKey", publicKey);
		keyMap.put("PrivateKey", privateKey);
		return keyMap;
	}

	public static String getPublicKey(Map<String, Object> keyMap) throws UnsupportedEncodingException {
		Key key = (Key) keyMap.get("PublicKey");
		return Base64.encode(key.getEncoded(), "utf-8");
	}

	public static String getPrivateKey(Map<String, Object> keyMap) throws Exception {
		Key key = (Key) keyMap.get("PrivateKey");
		return Base64.encode(key.getEncoded(), "utf-8");
	}

	public static byte[] decryptByPrivateKey(byte[] data, String key) throws Exception {
		byte[] keyBytes = Base64.decode(key.getBytes());
		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(2, privateKey);
		return cipher.doFinal(data);
	}

	public static byte[] decryptLongByPrivateKey(byte[] data, String key, int keyLength) throws Exception {
		byte[] keyBytes = Base64.decode(key.getBytes());

		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(2, privateKey);
		int keySize = keyLength / 8;
		StringBuilder sb = new StringBuilder();
		int dataLen = data.length;
		int index = 0;
		while (index < dataLen) {
			int left = dataLen - index;
			int readLen = keySize < left ? keySize : left;
			byte[] buffer = new byte[readLen];
			System.arraycopy(data, index, buffer, 0, readLen);
			index += readLen;
			sb.append(new String(cipher.doFinal(buffer)));
		}
		return sb.toString().getBytes();
	}

	public static byte[] decryptByPublicKey(byte[] data, String key) throws Exception {
		byte[] keyBytes = Base64.decode(key.getBytes());
		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		Key publicKey = keyFactory.generatePublic(x509KeySpec);
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(2, publicKey);
		return cipher.doFinal(data);
	}

	public static byte[] encryptByPublicKey(byte[] data, String key) throws Exception {
		byte[] keyBytes = Base64.decode(key.getBytes());
		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		Key publicKey = keyFactory.generatePublic(x509KeySpec);
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(1, publicKey);
		return cipher.doFinal(data);
	}

	public static byte[] encryptLongByPublicKey(byte[] data, String key, int keyLength) throws Exception {
		byte[] keyBytes = Base64.decode(key.getBytes());
		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		Key publicKey = keyFactory.generatePublic(x509KeySpec);
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(1, publicKey);
		int keySize = keyLength / 8;
		int ptSize = keySize - 11;
		int dataLen = data.length;
		byte[] relt = new byte[(dataLen + ptSize - 1) / ptSize * keySize];
		int index = 0;
		int offset = 0;
		while (index < dataLen) {
			int left = dataLen - index;
			int readLen = ptSize < left ? ptSize : left;
			byte[] buffer = new byte[readLen];
			System.arraycopy(data, index, buffer, 0, readLen);
			index += readLen;
			System.arraycopy(cipher.doFinal(buffer), 0, relt, offset, keySize);
			offset += keySize;
		}

		return relt;
	}

	public static byte[] encryptByPrivateKey(byte[] data, String key) throws Exception {
		byte[] keyBytes = Base64.decode(key.getBytes());
		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		cipher.init(1, privateKey);
		return cipher.doFinal(data);
	}
	

	public static RSAPublicKey generateRSAPublicKey(BigInteger modulus, BigInteger publicExponent) throws Exception {
		KeyFactory keyFac = null;
		try {
			keyFac = KeyFactory.getInstance("RSA");
		} catch (NoSuchAlgorithmException ex) {
			throw new Exception(ex.getMessage());
		}
		RSAPublicKeySpec priKeySpec = new RSAPublicKeySpec(modulus, publicExponent);
		try {
			return (RSAPublicKey) keyFac.generatePublic(priKeySpec);
		} catch (InvalidKeySpecException ex) {
			throw new Exception(ex.getMessage());
		}
	}

	
	public static RSAPrivateKey generateRSAPrivateKey(BigInteger modulus, BigInteger privateExponent) throws Exception {
		KeyFactory keyFac = null;
		try {
			keyFac = KeyFactory.getInstance("RSA");
		} catch (NoSuchAlgorithmException ex) {
			throw new Exception(ex.getMessage());
		}
		RSAPrivateKeySpec priKeySpec = new RSAPrivateKeySpec(modulus, privateExponent);
		try {
			return (RSAPrivateKey) keyFac.generatePrivate(priKeySpec);
		} catch (InvalidKeySpecException ex) {
			throw new Exception(ex.getMessage());
		}
	}
}