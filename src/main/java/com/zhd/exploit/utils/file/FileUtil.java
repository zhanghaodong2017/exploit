package com.zhd.exploit.utils.file;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.file.Files;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * 
 * @author 都丹
 * @date 2017年7月13日 上午9:56:19
 * @work 文件工具类
 * @version v1.0
 */
public class FileUtil {
	
	/** 默认字符编码 */
	public static final String CHARSET_DEFAULT = "UTF-8";
	
	public static final String GBK = "GBK";

	/**
	 * 将List中的内容逐条按行写入指定文件，如果文件路径不存在，则自动创建
	 * 默认编码为UTF-8
	 * @param filePath
	 * @param list
	 * @throws IOException
	 */
	public static void writeFileByList(String filePath, List<String> list) throws IOException{
		writeFileByList(filePath, list, CHARSET_DEFAULT);
	}
	
	/**
	 * 将List中的内容逐条按行写入指定文件，如果文件路径不存在，则自动创建
	 * @param filePath
	 * @param list
	 * @param charset
	 * @throws IOException
	 */
	public static void writeFileByList(String filePath, List<String> list, String charset) throws IOException{
		createFilePath(filePath);
		Path path = Paths.get(filePath);
		write(path, list, Charset.forName(charset)); 
	}
	
	private static Path write(Path path, Iterable<? extends CharSequence> lines, Charset cs, OpenOption... options) throws IOException {
		// ensure lines is not null before opening file
		Objects.requireNonNull(lines);
		CharsetEncoder encoder = cs.newEncoder();
		OutputStream out = Files.newOutputStream(path, options);
		try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, encoder))) {
			for (CharSequence line : lines) {
				writer.append(line);
				writer.append("\r\n");//Windows或Linux环境都加入\r\n换行符
			}
		}
		return path;
	}

	/**
	 * 如果该路径不存在，创建文件路径
	 * 
	 * @param filePath
	 */
	public static void createFilePath(String filePath) {
		File file = new File(filePath);
		File fileParent = file.getParentFile();
		if (!fileParent.exists()) {
			fileParent.mkdirs();
		}
	}
	
	/**
	 * 如果当前路径不存在，则创建
	 * @param filePath 文件路径
	 */
	public static void createPath(String filePath) {
		File file = new File(filePath);
		if (!file.exists()) {
			file.mkdirs();
		}		
	}
	
	/**
	 * 删除指定文件
	 * @param filePath 全限定名（包含文件名）
	 * @return
	 * @throws IOException
	 */
	public static boolean deleteFileByFile(String filePath) throws IOException {
		Path path = Paths.get(filePath);
		return Files.deleteIfExists(path);
	}
	
	/**
	 * 删除指定路径下所有文件，若路径不存在，则不删除、不抛异常
	 * @param filePath
	 * @throws IOException
	 */
	public static void deleteByFilePath(String filePath) throws IOException {
		Path path = Paths.get(filePath);
		if (Files.exists(path)) { // 当前路径存在
			try (Stream<Path> stream = Files.list(path);) {
				stream.forEach(p -> {
					try {
						Files.deleteIfExists(p);
					} catch (IOException e) {
						e.printStackTrace();
						throw new RuntimeException(e);
					}
				});
			}
		}
	}
}
