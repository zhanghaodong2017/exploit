package com.zhd.exploit.utils.convert;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;

import com.google.gson.Gson;

public class BeanConvert {
	
	static Gson gson = new Gson();
	
	/**
	 * bean转成map
	 * @param obj
	 * @return
	 */
	public static Map<String, Object> toMap(Object obj) {
		Field[] fields = getClassFields(obj.getClass(), new Field[0]);
		Map<String, Object> map = new HashMap<>();
		for (Field field : fields) {
			if(field.getName().equals("serialVersionUID")){
				continue;
			}
			try {
				Object fieldValue;
				field.setAccessible(true);
				fieldValue = field.get(obj);
				if (fieldValue == null || StringUtils.isBlank(String.valueOf(fieldValue))) {
					continue;
				}
				map.put(field.getName(), String.valueOf(fieldValue));
			} catch (IllegalArgumentException | IllegalAccessException e) {
				e.printStackTrace();
			}
		}
		return map;
	}
	
	/**
	 * 递归获取子类和父类字段
	 * @param classOfT
	 * @param returnFields
	 * @return
	 */
	private static <T> Field[] getClassFields(Class<T> classOfT, Field[] returnFields) {
		Field[] currentFields = classOfT.getDeclaredFields();
		returnFields = ArrayUtils.addAll(returnFields, currentFields);
		
		Field[] superFields = classOfT.getSuperclass().getDeclaredFields();
		if (superFields.length <= 0) {
			return returnFields;
		}
		returnFields = ArrayUtils.addAll(returnFields, superFields);
		getClassFields(classOfT.getSuperclass(), returnFields);
		return returnFields;
	}
	
	/**
	 * map转成bean
	 * @param map
	 * @param classOfT
	 * @return
	 */
	public static <T> T fromMap(Map<String, Object> map, Class<T> classOfT) {
		return gson.fromJson(gson.toJson(map), classOfT);
	}
	
}
